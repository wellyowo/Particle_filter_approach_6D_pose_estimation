CentroidPredictionNetwork_modify(
  (feat_input): GeometricEmbeddingNetwork_modify(
    (conv1): Conv1d(3, 64, kernel_size=(1,), stride=(1,))
    (conv2): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
    (conv3): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
    (conv4): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (ap1): AvgPool1d(kernel_size=(1000,), stride=(1000,), padding=(0,))
    (ap2): AvgPool1d(kernel_size=(1000,), stride=(1000,), padding=(0,))
    (ap3): AvgPool1d(kernel_size=(1000,), stride=(1000,), padding=(0,))
    (ap4): AvgPool1d(kernel_size=(1000,), stride=(1000,), padding=(0,))
  )
  (feat_pcd): GeometricEmbeddingNetwork_modify(
    (conv1): Conv1d(3, 64, kernel_size=(1,), stride=(1,))
    (conv2): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
    (conv3): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
    (conv4): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
    (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bn4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (ap1): AvgPool1d(kernel_size=(1000,), stride=(1000,), padding=(0,))
    (ap2): AvgPool1d(kernel_size=(1000,), stride=(1000,), padding=(0,))
    (ap3): AvgPool1d(kernel_size=(1000,), stride=(1000,), padding=(0,))
    (ap4): AvgPool1d(kernel_size=(1000,), stride=(1000,), padding=(0,))
  )
  (conv1_t): Conv1d(960, 512, kernel_size=(1,), stride=(1,))
  (conv2_t): Conv1d(512, 256, kernel_size=(1,), stride=(1,))
  (conv3_t): Conv1d(256, 128, kernel_size=(1,), stride=(1,))
  (conv4_t): Conv1d(128, 3, kernel_size=(1,), stride=(1,))
  (bn0): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
feat_input.conv1.weight torch.Size([64, 3, 1])
feat_input.conv1.bias torch.Size([64])
feat_input.conv2.weight torch.Size([128, 64, 1])
feat_input.conv2.bias torch.Size([128])
feat_input.conv3.weight torch.Size([256, 128, 1])
feat_input.conv3.bias torch.Size([256])
feat_input.conv4.weight torch.Size([512, 256, 1])
feat_input.conv4.bias torch.Size([512])
feat_input.bn1.weight torch.Size([64])
feat_input.bn1.bias torch.Size([64])
feat_input.bn2.weight torch.Size([128])
feat_input.bn2.bias torch.Size([128])
feat_input.bn3.weight torch.Size([256])
feat_input.bn3.bias torch.Size([256])
feat_input.bn4.weight torch.Size([512])
feat_input.bn4.bias torch.Size([512])
feat_pcd.conv1.weight torch.Size([64, 3, 1])
feat_pcd.conv1.bias torch.Size([64])
feat_pcd.conv2.weight torch.Size([128, 64, 1])
feat_pcd.conv2.bias torch.Size([128])
feat_pcd.conv3.weight torch.Size([256, 128, 1])
feat_pcd.conv3.bias torch.Size([256])
feat_pcd.conv4.weight torch.Size([512, 256, 1])
feat_pcd.conv4.bias torch.Size([512])
feat_pcd.bn1.weight torch.Size([64])
feat_pcd.bn1.bias torch.Size([64])
feat_pcd.bn2.weight torch.Size([128])
feat_pcd.bn2.bias torch.Size([128])
feat_pcd.bn3.weight torch.Size([256])
feat_pcd.bn3.bias torch.Size([256])
feat_pcd.bn4.weight torch.Size([512])
feat_pcd.bn4.bias torch.Size([512])
conv1_t.weight torch.Size([512, 960, 1])
conv1_t.bias torch.Size([512])
conv2_t.weight torch.Size([256, 512, 1])
conv2_t.bias torch.Size([256])
conv3_t.weight torch.Size([128, 256, 1])
conv3_t.bias torch.Size([128])
conv4_t.weight torch.Size([3, 128, 1])
conv4_t.bias torch.Size([3])
bn0.weight torch.Size([512])
bn0.bias torch.Size([512])
bn1.weight torch.Size([256])
bn1.bias torch.Size([256])
bn2.weight torch.Size([128])
bn2.bias torch.Size([128])
